include "hydra-sources.conf"
include "hydra-paths.conf"

plugins {
  values output {
    file: com.addthis.hydra.task.output.ValuesOutputFile
  }

  output-sink {
    _class: com.addthis.hydra.task.output.TaskDataOutput
    _array { _class: chain, _primary: outputs }
    chain: TaskDataOutputChain
    file: DataOutputFile
    filtered: FilteredDataOutput
    tree: tree.TreeMapper
  }

  values stream formatter {
    kv: com.addthis.hydra.task.output.ValueStreamFormatKV
    tsv: com.addthis.hydra.task.output.ValueStreamFormatTSV
  }

  output stream formatter {
    _class: com.addthis.hydra.task.output.OutputStreamFormatter
    channel: OutputStreamChannel
    column: OutputStreamColumnized
    noop: OutputStreamNoop
    json: OutputStreamJson
  }

  task {
    _class: com.addthis.hydra.task.run.TaskRunnable
    _default: map
    hoover: hoover.Hoover
    map: map.StreamMapper
    treestats: treestats.TreeStatisticsJob
  }

  factory input stream {
    "file": "com.addthis.hydra.task.source.FactoryInputStream$FileInputStreamSource"
    "inject": "com.addthis.hydra.task.source.FactoryInputStream$InjectorStreamSource"
    "socket": "com.addthis.hydra.task.source.FactoryInputStream$SocketInputStreamSource"
  }

  stream builder {
    sortDeDupe: com.addthis.hydra.task.map.SortedDeDupBuilder
    rowSplitter: com.addthis.hydra.task.map.StreamRowSplitBuilder
    each: com.addthis.hydra.task.map.EachStreamBuilder
    closeableFilter: com.addthis.hydra.task.map.CloseableBundleFilterStreamBuilder
    join: com.addthis.hydra.task.map.StreamJoin
    chain: com.addthis.hydra.task.map.StreamChain
  }
}

com.addthis.hydra.task.output {
  tree.TreeMapper {
    live = false
    liveHost = localhost
    livePort = -1
  }
}

com.addthis.hydra.task.map.StreamMapper {
  threads: 2
  threads: ${?task.threads}
}

