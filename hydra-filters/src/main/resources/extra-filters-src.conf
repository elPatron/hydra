com.addthis.hydra.data.filter.bundle {
  BundleFilterTry {catch {log = caught filter failure from try block, every = 30}}
}

plugins.bundle-filter {
  # same as standard, but with '_primary: filter' ; this allows eliding 'filter'
  _default: { _class: field, _primary: filter }

  try {
    _class: BundleFilterTry, _inline: true, _primary: try
  }

  if {
    _class: condition, _inline: true, _primary: if
    returnFilter: true
  }

  log {
    _class: debug, _primary: prefix, _inline: true
    maxBundles = 1, every = 10
  }

  has {
    _class: field, _primary: from
  }

  unary { _class: BundleFilterUnary, _primary: filter }
  safely { _class: unary, operation: true }
  true { _class: unary, operation: true }
  ignore { _class: unary, operation: true }
  fail { _class: unary, operation: false }
  false { _class: unary, operation: false }
  is { _class: unary, operation: identity }
  # not is taken by a comparatively useless filter
  is not { _class: unary, operation: negation }
  invert { _class: unary, operation: negation }
  isn't { _class: unary, operation: negation }
}

# promoted from user-filters macro, or derived therefrom
plugins.value-filter {
}

plugins.bundle-filter {
  # usage: {is-not-empty:"UID"}
  is-not-empty { _class: field, _primary: from, filter.empty.not: true }

  # formats native time value in TIME field and saves to DATE (yyMMdd-HHmmss-yyww) field.
  time-to-date {
    _class: time
    src: { field: "TIME", format: "native" }
    dst: { field: "DATE", format: "yyMMdd-HHmmss-yyww", timeZone: "EST" }
  }

  # formats native time value in TIME field and saves to DATE (yyMMdd-HHmmss-yyww) and DATE_YMD (yyMMdd) fields.
  time-to-date-ymd {
    _class: chain
    filter: [
      {time-to-date {}}
      {from: "DATE", to: "DATE_YMD", filter.slice.to: 6}
    ]
  }
}
